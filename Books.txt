using System.Text.Json;


class Program
{
    static void Main()
    {
        BookManager manager = new BookManager();
        bool exit = false;

        while (!exit)
        {
            Console.Clear();
            Console.WriteLine("\nBook Library Menu:\n");
            Console.WriteLine("1. Add Book");
            Console.WriteLine("2. View All Books");
            Console.WriteLine("3. Search Book by Title");
            Console.WriteLine("4. Exit\n");
            Console.Write("Choose an option: ");

            switch (Console.ReadLine())
            {
                case "1":
                    //Console.Clear();
                    string title;
                    while (true)
                    {
                        Console.Write("\nEnter Title: ");
                        title = Console.ReadLine();
                        if (!string.IsNullOrWhiteSpace(title))
                        {
                            break; // If the name is correct, exit the loop 
                        }
                        Console.WriteLine("Title cannot be empty. Please enter a valid title.");
                    }
                    string author;
                    while (true)
                    {
                        Console.Write("\nEnter Author: ");
                        author = Console.ReadLine();
                        if (!string.IsNullOrWhiteSpace(author))
                        {
                            break; // If author is correct, exit the loop 
                        }
                        Console.WriteLine("Author cannot be empty. Please enter a valid author.");
                    }

                    int year;
                    while (true)
                    {
                        Console.Write("Enter Year: ");
                        if (int.TryParse(Console.ReadLine(), out year))
                        {
                            int currentYear = DateTime.Now.Year;
                            if (year > currentYear)
                            {
                                Console.WriteLine($"The year cannot be greater than {currentYear}. Please try again.");
                            }
                            else
                            {
                                break;
                            }
                        }
                        else
                        {
                            Console.WriteLine("Invalid input. Please enter a valid year.");
                        }
                    }

                    manager.AddBook(new Book(title, author, year));
                    Console.WriteLine("Book added successfully!");
                    Console.ReadKey();
                    break;

                case "2":
                    //Console.Clear();
                    manager.ShowAllBooks();
                    Console.WriteLine("\nPress any key to return to menu...");
                    Console.ReadKey();
                    break;

                case "3":
                    //Console.Clear();
                    Console.Write("\nEnter search term (Title, Author, or Year): ");
                    string searchTitle = Console.ReadLine();
                    Console.WriteLine();
                    var foundBooks = manager.SearchBookByTitle(searchTitle);
                    if(foundBooks.Count > 0)
                    {
                        Console.WriteLine("Found books:");
                        foreach(var book in foundBooks)
                        {
                            Console.WriteLine(book);
                        }
                    }
                    else
                    {
                        Console.WriteLine("No books found with the given title.");
                    }
                    Console.WriteLine("\nPress any key to return to menu...");
                    Console.ReadKey();
                    break;
                case "4":
                    exit = true;
                    break;
                default:
                    Console.WriteLine("Invalid option. Please try again.");
                    Console.WriteLine("\nPress any key to return to menu...");
                    Console.ReadKey();
                    break;
            }
        }
    }
}

public class Book
{
    public string Title { get; set; }
    public string Author { get; set; }
    public int Year { get; set; }

    public Book(string title, string author, int year)
    {
        Title = title;
        Author = author;
        Year = year;
    }

    public override string ToString()
    {
        return $"{Title} by {Author}, {Year}";
    }
}

public class BookManager
{
    // Path to JSON file
    private const string FilePath = "books.json";
    private List<Book> books = new List<Book>();

    // Constructor for loading data from file
    public BookManager()
    {
        LoadBooksFromFile();
    }

    // Add new book
    public void AddBook(Book book)
    {
        books.Add(book);
        SaveBooksToFile();
    }

    // Display all Books
    public void ShowAllBooks()
    {
        if (books.Count == 0)
        {
            Console.WriteLine("No books available.");
        }
        else
        {
            Console.WriteLine("\nBooks List:\n");
            foreach (var book in books)
            {
                Console.WriteLine(book);
            }
        }
    }

    // Search books by title
    public List<Book> SearchBookByTitle(string searchTerm)
    {
        return books.FindAll(book => 
            book.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            book.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            book.Year.ToString().Contains(searchTerm));
    }

    // Load Books from JSON
    private void LoadBooksFromFile()
    {
        if (File.Exists(FilePath))
        {
            try
            {
                string json = File.ReadAllText(FilePath);
                books = JsonSerializer.Deserialize<List<Book>>(json) ?? new List<Book>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading books: {ex.Message}");
                books = new List<Book>();
            }
        }
    }

    // save books in JSON file
    private void SaveBooksToFile()
    {
        try
        {
            string json = JsonSerializer.Serialize(books, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(FilePath, json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving books: {ex.Message}");
        }
    }
}
